processors_to_run: all

preprocessed_dataset_files: null  # can specify multiple patters separated by space
prediction_jsonl_files: null  # can specify datasets from HF instead of prediction_jsonl_files
output_path: ???

metadata: null  # can provide additional metadata to store (e.g. dataset or generation_type)
skip_first: 0  # useful for skipping validation set from train_full generation (it's always first)
add_correct: true  # can set to False if only want to export incorrect solutions
add_incorrect: false  # if True, saves only incorrect solutions instead of correct

downsampling_method: null  # fair, random or null
random_seed: 42
do_shuffle: true
num_output_samples: null

prompt_type: llama3/codegen_sft
chat_format: false  # whether to use NeMo's chat format

add_eos: true
eos_token: <|eot_id|>

filters:
  question_key: input  # key to group samples by before code_text_filter
  solution_key: output  # key to filter solutions by

  drop_incorrect_code_blocks: true

processors:
  - _target_: nemo_skills.finetuning.data_preparation_utils.preprocessing.ReadData
    preprocessed_dataset_files: ${preprocessed_dataset_files}
    prediction_jsonl_files: ${prediction_jsonl_files}
    question_key: ${filters.question_key}
    solution_key: ${filters.solution_key}
    skip_first: ${skip_first}
    add_correct: ${add_correct}
    add_incorrect: ${add_incorrect}

  - _target_: nemo_skills.finetuning.data_preparation_utils.filters.DropIncorrectCodeBlocks
    should_run: ${filters.drop_incorrect_code_blocks}
    solution_key: ${filters.solution_key}
    test_cases:
      - {input: {output: "Solution ```python\ndef hello()``` Second code ```python\n"}, output: null}
      - {input: {output: "Solution ```python\ndef hello()```"}, output: {output: "Solution ```python\ndef hello()```"}}
      - {input: {output: "She had python\ndef hello()```"}, output: null}

  - _target_: nemo_skills.finetuning.data_preparation_utils.filters.AddEosToken
    should_run: ${add_eos}
    solution_key: ${filters.solution_key}
    eos_token: ${eos_token}
    test_cases:
      - {input: {output: "Solution: ```python\ndef hello()```"}, output: {output: "Solution: ```python\ndef hello()```<|eot_id|>"}}

  - _target_: nemo_skills.finetuning.data_preparation_utils.preprocessing.WriteFinalSftManifest
    output_manifest_file: ${output_path}
    prompt_type: ${prompt_type}
    question_key: ${filters.question_key}
    solution_key: ${filters.solution_key}
    chat_format: ${chat_format}
    metadata: ${metadata}
