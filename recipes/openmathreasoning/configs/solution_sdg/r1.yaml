cluster: slurm
base_output_dir: /workspace/openmathreasoning
expname: openmathreasoning
suffix: r1  # Suffix for experiment names


# Input file for the first stage (generate_solutions)
# This should be the output of the problem_generation.py pipeline
input_file: ${base_output_dir}/problem-sdg/step-5-merge-data/all-problems.jsonl
# File with benchmark problems you want decontaminate with
contamination_file: ${base_output_dir}/problem-sdg/step-6-decontamination/output.jsonl
# Number of solutions per each problem from the input file to generate
num_random_seeds_to_generate: 16
# Can define initial dependency for the `generate_solutions` stage to run after
initial_dependency: ${expname}-merge-data-qwen-instruct

# Define judge model server parameters
generate_kwargs:
  # Model to be used for answer judgement
  model: /hf_models/Qwen2.5-32B-Instruct
  # Server type to launch the model
  server_type: trtllm
  # Server parameters
  server_gpus: 8
  server_nodes: 1
  # Number of generated solutions per problem to judge
  num_random_seeds: ${num_random_seeds_to_generate}

# Define the full sequence of stages for this mode
pipeline_stages:
  - generate_solutions          # Generate initial solutions
  - fill_majority_answer        # Fill missing ground truth answers if any
  - judge_answers               # Judge correctness based on final answer
  - prepare_for_sft             # Prepare the final dataset for SFT training

# Directory structure configuration
directories:
  step-1-generate-solutions: ${base_output_dir}/solution-sdg-${suffix}/step-1-generate-solutions
  step-2-fill-majority: ${base_output_dir}/solution-sdg-${suffix}/step-2-fill-majority
  step-3-judge-answers: ${base_output_dir}/solution-sdg-${suffix}/step-3-judge-answers
  step-4-prepare-sft: ${base_output_dir}/solution-sdg-${suffix}/step-4-prepare-sft

# Stage-specific configurations
stages:
  generate_solutions:
    output_dir: ${directories.step-1-generate-solutions}
    input_file: ${input_file}
    # Arguments passed inside the generate context string (e.g., ++param=value)
    inline_args: "++inference.tokens_to_generate=16384"
    # Arguments passed as kwargs to the pipeline function (e.g. generate())
    stage_kwargs:
      # assuming the model is in fp8 and running on H100 GPUs
      model: /hf_models/DeepSeek-R1-tp16  # checkpoint is pre-sharded to tp16 for faster loading
      server_type: sglang
      server_gpus: 8
      server_nodes: 2
      server_args: "--load-format sharded_state --context-length 18384"
      num_random_seeds: ${num_random_seeds_to_generate}
      num_chunks: 10  # since data is big, we are parallelizing it 10x (for each seed, so in total 80 jobs are scheduled)
      # if your slurm cluster has a mandatory job timeout, you can schedule multiple dependent jobs with
      # dependent_jobs: N

  fill_majority_answer:
    output_dir: ${directories.step-2-fill-majority}
    input_dir: ${directories.step-1-generate-solutions}
    dependencies:
      - generate_solutions
    # You can use CPU partition for this script, if available
    # stage_kwargs:
    #   partition: cpu

  judge_answers:
    output_dir: ${directories.step-3-judge-answers}
    input_dir: ${directories.step-2-fill-majority}
    dependencies:
      - fill_majority_answer
    inline_args: ""
    stage_kwargs: ${generate_kwargs}

  prepare_for_sft:
    output_dir: ${directories.step-4-prepare-sft}
    input_file: ${directories.step-3-judge-answers}/output-rs*.jsonl
    prompt_config: generic/math
    tokenizer: Qwen/Qwen2.5-32B-Instruct
    contamination_file: ${contamination_file}
    dependencies:
      - judge_answers
    # You can use CPU partition for this script, if available
    # stage_kwargs:
    #   partition: cpu
